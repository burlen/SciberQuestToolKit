/*
   ____    _ __           ____               __    ____
  / __/___(_) /  ___ ____/ __ \__ _____ ___ / /_  /  _/__  ____
 _\ \/ __/ / _ \/ -_) __/ /_/ / // / -_|_-</ __/ _/ // _ \/ __/
/___/\__/_/_.__/\__/_/  \___\_\_,_/\__/___/\__/ /___/_//_/\__(_)

Copyright on 2008 SciberQuest Inc.
*/
#include "pqSC11DemoReader.h"

#include "SQMacros.h"

#include "pqApplicationCore.h"
#include "pqRenderView.h"
#include "pqActiveObjects.h"

#include "vtkSMProxy.h"
#include "vtkSMProperty.h"
#include "vtkSMIntVectorProperty.h"
#include "vtkSMDoubleVectorProperty.h"
#include "vtkSMRenderViewProxy.h"

#include <QWidget>
#include <QCheckBox>
#include <QSpinBox>
#include <QDoubleValidator>
#include <QLineEdit>
#include <QTimer>
#include <QLayout>
#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QLabel>
#include <QDebug>

#include <iostream>
using std::cerr;
using std::endl;

//#define pqSC11DemoReaderDEBUG


//-----------------------------------------------------------------------------
pqSC11DemoReader::pqSC11DemoReader(
      pqProxy* pxy,
      QWidget* p)
             :
  pqAutoGeneratedObjectPanel(pxy,p),
  RenderState(0),
  Frame(0)

{
  #if defined pqSC11DemoReaderDEBUG
  cerr << ":::::::::::::::::::::::::::::::pqSC11DemoReader" << endl;
  #endif

  //QVBoxLayout *vlayout=dynamic_cast<QVBoxLayout*>(this->layout());

  QVBoxLayout *vlayout=new QVBoxLayout;

  // toggle the demo
  this->RunButton=new QCheckBox("Run Demo", this);
  QObject::connect(
        this->RunButton,
        SIGNAL(toggled(bool)),
        this,
        SLOT(RunDemo(bool)));
  vlayout->addWidget(this->RunButton);

  QHBoxLayout *hlayout;
  // still frames count
  hlayout=new QHBoxLayout;
  hlayout->addWidget(new QLabel("Timer Interval:"));

  this->TimerInterval=new QSpinBox;
  this->TimerInterval->setMinimum(0);
  this->TimerInterval->setMaximum(100000);
  this->TimerInterval->setValue(500);
  hlayout->addWidget(this->TimerInterval);

  vlayout->addLayout(hlayout);

  // still frames count
  hlayout=new QHBoxLayout;
  hlayout->addWidget(new QLabel("Still Frames:"));

  this->StillFrames=new QSpinBox;
  this->StillFrames->setMinimum(0);
  this->StillFrames->setMaximum(100000);
  this->StillFrames->setValue(10);
  hlayout->addWidget(this->StillFrames);

  vlayout->addLayout(hlayout);

  // rotate frames count
  hlayout=new QHBoxLayout;
  hlayout->addWidget(new QLabel("Rotate Frames:"));

  this->RotateFrames=new QSpinBox;
  this->RotateFrames->setMinimum(0);
  this->RotateFrames->setMaximum(100000);
  this->RotateFrames->setValue(100);
  hlayout->addWidget(this->RotateFrames);

  vlayout->addLayout(hlayout);

  // camera radius
  hlayout=new QHBoxLayout;
  hlayout->addWidget(new QLabel("Camera Radius:"));

  this->CamRadius=new QLineEdit;
  this->CamRadius->setValidator(new QDoubleValidator(this->CamRadius));
  this->CamRadius->setText("2000");
  hlayout->addWidget(this->CamRadius);

  vlayout->addLayout(hlayout);

  // camera radius
  hlayout=new QHBoxLayout;
  hlayout->addWidget(new QLabel("Camera Height:"));

  this->CamHeight=new QLineEdit;
  this->CamHeight->setValidator(new QDoubleValidator(this->CamHeight));
  this->CamHeight->setText("3000");
  hlayout->addWidget(this->CamHeight);

  vlayout->addLayout(hlayout);

  // camera focal point
  hlayout=new QHBoxLayout;
  hlayout->addWidget(new QLabel("Focal Point:"));

  this->FocalX=new QLineEdit;
  this->FocalX->setValidator(new QDoubleValidator(this->FocalX));
  this->FocalX->setText("0");
  hlayout->addWidget(this->FocalX);

  this->FocalY=new QLineEdit;
  this->FocalY->setValidator(new QDoubleValidator(this->FocalY));
  this->FocalY->setText("0");
  hlayout->addWidget(this->FocalY);

  this->FocalZ=new QLineEdit;
  this->FocalZ->setValidator(new QDoubleValidator(this->FocalZ));
  this->FocalZ->setText("0");
  hlayout->addWidget(this->FocalZ);

  vlayout->addLayout(hlayout);

  QWidget *w=new QWidget(this);
  w->setLayout(vlayout);

  this->layout()->addWidget(w);

}

//-----------------------------------------------------------------------------
void pqSC11DemoReader::RunDemo(bool start)
{
  #if defined pqSC11DemoReaderDEBUG
  cerr << ":::::::::::::::::::::::::::::::RunDemo" << endl;
  #endif

  if (start)
    {
    #if defined pqSC11DemoReaderDEBUG
    cerr << "starting" << endl;
    #endif
    this->UpdateReader();
    }
  else
    {
    #if defined pqSC11DemoReaderDEBUG
    cerr << "stopping" << endl;
    #endif
    }
}

//-----------------------------------------------------------------------------
void pqSC11DemoReader::UpdateReader()
{
  #if defined pqSC11DemoReaderDEBUG
  cerr << ":::::::::::::::::::::::::::::::UpdateReader" << endl;
  #endif

  // mark server side as dirty
  this->setModified();
  this->accept();

  // render
  size_t nFrames;
  switch (this->RenderState)
    {
    case RENDER_STILL:
      this->StillRender();
      nFrames=this->StillFrames->text().toInt();
      if (this->Frame>nFrames)
        {
        this->RenderState=RENDER_ROTATE;
        this->Frame=0;
        }
      else
        {
        this->Frame+=1;
        }
      break;

    case RENDER_ROTATE:
      this->RotateRender();
      nFrames=this->RotateFrames->text().toInt();
      if (this->Frame>nFrames)
        {
        this->RenderState=RENDER_STILL;
        this->Frame=0;
        }
      else
        {
        this->Frame+=1;
        }
      break;

    default:
      cerr << "Error, bas case " << this->RenderState << endl;
      this->RenderState=RENDER_STILL;
      this->Frame=0;
    }

  // reset timer
  if (this->RunButton->isChecked())
    {
    int interval=this->TimerInterval->value();
    QTimer::singleShot(interval, this, SLOT(UpdateReader()));
    }
}

//-----------------------------------------------------------------------------
void pqSC11DemoReader::StillRender()
{
  #if defined pqSC11DemoReaderDEBUG
  cerr << ":::::::::::::::::::::::::::::::StillRender" << endl;
  #endif

  pqRenderView* renderView =
    qobject_cast<pqRenderView*>(pqActiveObjects::instance().activeView());

  renderView->render();
}

//-----------------------------------------------------------------------------
void pqSC11DemoReader::RotateRender()
{
  #if defined pqSC11DemoReaderDEBUG
  cerr << ":::::::::::::::::::::::::::::::MotionRender" << endl;
  #endif

  double dt=2.0*3.141592/this->RotateFrames->text().toDouble();
  double t=this->Frame*dt;
  double r=this->CamRadius->text().toDouble();
  double h=this->CamHeight->text().toDouble();

  double focX=this->FocalX->text().toDouble();
  double focY=this->FocalY->text().toDouble();
  double focZ=this->FocalZ->text().toDouble();

  double camX=r*cos(t);
  double camY=r*sin(t);
  double camZ=h;

  double camTX=-r*sin(t);
  double camTY=r*cos(t);

  double camUpX=-camTY*camZ;
  double camUpY=camTX*camZ;
  double camUpZ=-camTX*camY+camTY*camX;

  camX+=focX;
  camY+=focY;
  camZ+=focZ;

  pqRenderView *l_view=dynamic_cast<pqRenderView*>(this->view());
  if (!l_view)
    {
    sqErrorMacro(qDebug(),"Failed to get the current view.");
    return;
    }

  vtkSMRenderViewProxy *l_proxy=l_view->getRenderViewProxy();

  vtkSMDoubleVectorProperty *prop;

  double pos[3]={camX,camY,camZ};
  prop=dynamic_cast<vtkSMDoubleVectorProperty*>(l_proxy->GetProperty("CameraPosition"));
  prop->SetElements(pos);

  double cen[3]={focX,focY,focZ};
  prop=dynamic_cast<vtkSMDoubleVectorProperty*>(l_proxy->GetProperty("CameraFocalPoint"));
  prop->SetElements(cen);

  double up[3]={camUpX,camUpY,camUpZ};
  prop=dynamic_cast<vtkSMDoubleVectorProperty*>(l_proxy->GetProperty("CameraViewUp"));
  prop->SetElements(up);

  prop=dynamic_cast<vtkSMDoubleVectorProperty*>(l_proxy->GetProperty("CenterOfRotation"));
  prop->SetElements(cen);

  l_proxy->UpdateVTKObjects();

  l_view->render();
}

//-----------------------------------------------------------------------------
void pqSC11DemoReader::accept()
{
  #if defined pqSC11DemoReaderDEBUG
  cerr << ":::::::::::::::::::::::::::::::accept" << endl;
  #endif

  vtkSMProxy* pmProxy=this->referenceProxy()->getProxy();

  vtkSMIntVectorProperty *dviProp
    = dynamic_cast<vtkSMIntVectorProperty*>(pmProxy->GetProperty("DirtyValueInfo"));
  pmProxy->UpdatePropertyInformation(dviProp);
  int dv=dviProp->GetElement(0);

  dv=dv!=0?1:0;

  vtkSMIntVectorProperty *dvProp
    = dynamic_cast<vtkSMIntVectorProperty*>(pmProxy->GetProperty("DirtyValue"));
  dvProp->SetElement(0,dv);
  dvProp->Modified();

  pmProxy->UpdateVTKObjects();

  this->pqAutoGeneratedObjectPanel::accept();
}


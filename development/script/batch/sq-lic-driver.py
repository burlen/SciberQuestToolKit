import sys
import os
import imp
from math import sqrt
from time import asctime

# config file is passed by environment variable.
configFileName = os.getenv('SQ_DRIVER_CONFIG')
if (configFileName is None):
  print 'Usage:'
  print 'export SQ_DRIVER_CONFIG=/path/to/config.py'
  print '%s'%(sys.argv[0])

print 'configFileName:'
print configFileName

config = imp.load_source('module.name',configFileName)

try: paraview.simple
except: from paraview.simple import *
paraview.simple._DisableFirstRenderCameraReset()

# load the pugins
# paraview install location is passed via env var
pvPath = os.getenv('PV_LIBRARY_PATH')

print 'pvPath'
print pvPath

licPath = '%s/libSurfaceLIC.so'%(pvPath)
LoadPlugin(licPath,False,globals())
LoadPlugin(licPath,True,globals())

sqtkPath = '%s/libSciberQuestToolKit.so'%(pvPath)
LoadPlugin(sqtkPath,False,globals())
LoadPlugin(sqtkPath,True,globals())

###############################################################################
def createLUT(arrayName,arrayComps,lutRange,lutMode,obj):
  """
  create lut for *arrayName* with *arrayComps* defined over
  *lutRange* using *lutMode* where lutMode's are :

    0 = blue-to-red diverging
    1 = blue to red HSV
    2 = black body
    3 = gray scale
  """

  actualLutRange = [0.0, 1.0]

  if (len(lutRange) == 0):
    if (arrayComps == 1):
      actualLutRange = obj.PointData.GetArray(arrayName).GetRange()
    else:
      # TODO - this could be larger than the range of the magnitude array
      rx = obj.PointData.GetArray(arrayName).GetRange(0)
      ry = obj.PointData.GetArray(arrayName).GetRange(1)
      rz = obj.PointData.GetArray(arrayName).GetRange(2)
      actualLutRange = [0.0,
           sqrt(rx[1]*rx[1]+ry[1]*ry[1]+rz[1]*rz[1])]
      #actualLutRange = [sqrt(rx[0]*rx[0]+ry[0]*ry[0]+rz[0]*rz[0]),
      #     sqrt(rx[1]*rx[1]+ry[1]*ry[1]+rz[1]*rz[1])]
  else:
    actualLutRange = lutRange

  print 'arrayName'
  print arrayName
  print 'lut range'
  print actualLutRange

  if (lutMode == 0):
    # blue to red sym/div
    lut = GetLookupTableForArray(arrayName,
               arrayComps,
               RGBPoints=[actualLutRange[0], 0.0, 0.0, 1.0, actualLutRange[1], 1.0, 0.0, 0.0],
               ColorSpace='Diverging',
               VectorMode='Magnitude',
               ScalarRangeInitialized=1.0)

  elif (lutMode == 1):
    # blut to red
    lut = GetLookupTableForArray(arrayName,
              arrayComps,
              RGBPoints=[actualLutRange[0], 0.0, 0.0, 1.0, actualLutRange[1], 1.0, 0.0, 0.0],
              ColorSpace='HSV',
              VectorMode='Magnitude',
              ScalarRangeInitialized=1.0)

  elif (lutMode == 2):
    # black body rad
    cbar_d=actualLutRange[1]-actualLutRange[0]
    cbar_p1=actualLutRange[0]+0.4*cbar_d
    cbar_p2=actualLutRange[0]+0.8*cbar_d
    lut = GetLookupTableForArray(arrayName,
              arrayComps,
              RGBPoints=[actualLutRange[0], 0.0, 0.0, 0.0, cbar_p1, 0.90196078431372551, 0.0, 0.0, cbar_p2, 0.90196078431372551, 0.90196078431372551, 0.0, actualLutRange[1], 1.0, 1.0, 1.0],
              ColorSpace='Diverging',
              VectorMode='Magnitude',
              ScalarRangeInitialized=1.0)

  elif (lutMode == 3):
    # gray scale
    lut = GetLookupTableForArray(arrayName,
              arrayComps,
              RGBPoints=[actualLutRange[0], 0.0, 0.0, 0.0, actualLutRange[1], 1.0, 1.0, 1.0],
              ColorSpace='HSV',
              VectorMode='Magnitude',
              ScalarRangeInitialized=1.0)
  elif (lutMode == 4):
    # spectral
    lut = GetLookupTableForArray(arrayName,
              arrayComps,
              RGBPoints=[-1.0, 0.61960784313725492, 0.0039215686274509803, 0.25882352941176473, -0.99215600000000004, 0.62806134126802471, 0.013305867093919279, 0.26082246128023195, -0.98431400000000002, 0.63653009842069119, 0.022690165560387578, 0.26282139314869918, -0.97646999999999995, 0.64498359655146109, 0.032059205004959179, 0.2648203250171664, -0.96862800000000004, 0.65343709468223088, 0.04144350347142748, 0.26681925688563363, -0.96078399999999997, 0.66190585183489736, 0.050827801937895781, 0.26881818875410085, -0.95294199999999996, 0.67035934996566715, 0.060212100404364081, 0.27081712062256807, -0.94509799999999999, 0.67881284809643705, 0.069596398870832382, 0.2728160524910353, -0.93725400000000003, 0.68728160524910353, 0.07896543831540398, 0.27481498435950258, -0.92941200000000002, 0.69573510337987332, 0.088349736781872287, 0.2768139162279698, -0.92156800000000005, 0.70418860151064322, 0.097734035248340581, 0.27881284809643703, -0.91372600000000004, 0.71264209964141301, 0.10711833371480887, 0.28081177996490425, -0.90588199999999997, 0.72111085679407949, 0.11648737315938049, 0.28281071183337148, -0.89803999999999995, 0.72956435492484928, 0.12587167162584878, 0.2848096437018387, -0.89019599999999999, 0.73801785305561918, 0.13525597009231707, 0.28680857557030592, -0.88235200000000003, 0.74648661020828566, 0.1446402685587854, 0.28880750743877315, -0.87451000000000001, 0.75494010833905545, 0.15402456702525369, 0.29080643930724043, -0.86666599999999994, 0.76339360646982524, 0.16339360646982529, 0.29280537117570765, -0.85882400000000003, 0.77186236362249183, 0.17277790493629358, 0.29480430304417488, -0.85097999999999996, 0.78031586175326162, 0.18216220340276187, 0.2968032349126421, -0.84313799999999994, 0.78876935988403141, 0.1915465018692302, 0.29880216678110932, -0.83529399999999998, 0.797238117036698, 0.20091554131380179, 0.30080109864957655, -0.82745000000000002, 0.80569161516746779, 0.21029983978027009, 0.30280003051804377, -0.819608, 0.81414511329823758, 0.21968413824673838, 0.30479896238651105, -0.81176400000000004, 0.82261387045090406, 0.22906843671320667, 0.30679789425497828, -0.80392200000000003, 0.83106736858167396, 0.238452735179675, 0.3087968261234455, -0.79607799999999995, 0.83767452506294349, 0.24675364309147785, 0.30888838025482568, -0.78823600000000005, 0.84245059891660945, 0.25398641947051193, 0.30704203860532542, -0.78039199999999997, 0.84721141374837872, 0.26120393682764936, 0.30519569695582516, -0.77254999999999996, 0.85198748760204468, 0.26843671320668344, 0.30334935530632484, -0.764706, 0.85674830243381395, 0.27566948958571758, 0.30150301365682458, -0.75686200000000003, 0.86150911726558332, 0.28288700694285496, 0.29965667200732432, -0.74902000000000002, 0.86628519111924929, 0.29011978332188909, 0.29781033035782406, -0.74117600000000006, 0.87104600595101855, 0.29735255970092317, 0.2959639887083238, -0.73333399999999993, 0.87582207980468452, 0.30457007705806055, 0.29411764705882354, -0.72548999999999997, 0.88058289463645378, 0.31180285343709468, 0.29227130540932328, -0.71764800000000006, 0.88535896849011975, 0.31903562981612876, 0.29042496375982302, -0.70980399999999999, 0.89011978332188901, 0.3262531471732662, 0.2885786221103227, -0.70195999999999992, 0.89488059815365839, 0.33348592355230028, 0.28673228046082244, -0.69411800000000001, 0.89965667200732435, 0.34071869993133441, 0.28488593881132218, -0.68627400000000005, 0.90441748683909362, 0.34793621728847179, 0.28303959716182192, -0.67843200000000004, 0.90919356069275958, 0.35516899366750593, 0.28119325551232166, -0.67058799999999996, 0.91395437552452885, 0.36240177004654001, 0.2793469138628214, -0.66274600000000006, 0.91873044937819481, 0.36963454642557414, 0.27751583123521784, -0.65490199999999998, 0.92349126420996419, 0.37685206378271152, 0.27566948958571758, -0.64705799999999991, 0.92825207904173346, 0.38408484016174566, 0.27382314793621731, -0.63921600000000001, 0.93302815289539942, 0.39131761654077973, 0.271976806286717, -0.63137200000000004, 0.93778896772716869, 0.39853513389791717, 0.27013046463721674, -0.62352999999999992, 0.94256504158083465, 0.40576791027695125, 0.26828412298771648, -0.61568599999999996, 0.94732585641260392, 0.41300068665598533, 0.26643778133821622, -0.60784400000000005, 0.95210193026626988, 0.42021820401312276, 0.26459143968871596, -0.59999999999999998, 0.95686274509803926, 0.42745098039215684, 0.2627450980392157, -0.5921559999999999, 0.95825131609063863, 0.43744563973449302, 0.267353322652018, -0.584314, 0.9596246280613413, 0.4474402990768292, 0.271976806286717, -0.57647000000000004, 0.96101319905394067, 0.45743495841916532, 0.27658503089951936, -0.56862800000000002, 0.96240177004654004, 0.46742961776150149, 0.28119325551232166, -0.56078399999999995, 0.96379034103913941, 0.47743953612573437, 0.28581673914702066, -0.55294200000000004, 0.96516365300984208, 0.48743419546807049, 0.29042496375982302, -0.54509800000000008, 0.96655222400244145, 0.49742885481040666, 0.29503318837262532, -0.5372539999999999, 0.96794079499504082, 0.50742351415274278, 0.29965667200732432, -0.52941199999999999, 0.96931410696574349, 0.51741817349507901, 0.30426489662012662, -0.52156800000000003, 0.97070267795834286, 0.52741283283741514, 0.30888838025482568, -0.5137259999999999, 0.97209124895094223, 0.53740749217975126, 0.31349660486762798, -0.50588199999999994, 0.97346456092164491, 0.54740215152208749, 0.31810482948043028, -0.49804000000000004, 0.97485313191424428, 0.55739681086442361, 0.32272831311512934, -0.49019599999999997, 0.97624170290684364, 0.56739147020675973, 0.32733653772793164, -0.482352, 0.97763027389944301, 0.57738612954909585, 0.33194476234073395, -0.47450999999999999, 0.97900358587014569, 0.58739604791332878, 0.336568245975433, -0.46666600000000003, 0.98039215686274506, 0.5973907072556649, 0.3411764705882353, -0.45882400000000001, 0.98178072785534443, 0.60738536659800102, 0.34578469520103761, -0.45098000000000005, 0.9831540398260471, 0.61738002594033725, 0.35040817883573661, -0.44313800000000003, 0.98454261081864658, 0.62737468528267337, 0.35501640344853896, -0.43529399999999996, 0.98593118181124595, 0.63736934462500949, 0.35962462806134127, -0.42745, 0.98731975280384532, 0.64736400396734572, 0.36424811169604027, -0.41960799999999998, 0.98869306477454799, 0.65735866330968185, 0.36885633630884263, -0.41176400000000002, 0.99008163576714736, 0.66735332265201797, 0.37346456092164493, -0.403922, 0.99147020675974673, 0.6773479819943542, 0.37808804455634393, -0.39607800000000004, 0.99223315785458155, 0.68619821469443809, 0.38362706950484476, -0.38823600000000003, 0.99238574807354851, 0.69388876173037306, 0.39008163576714733, -0.38039199999999995, 0.99253833829251548, 0.70157930876630803, 0.39653620202944989, -0.37255000000000005, 0.99269092851148244, 0.70926985580224311, 0.40300602731364921, -0.36470599999999997, 0.9928435187304494, 0.71696040283817808, 0.40946059357595177, -0.35686200000000001, 0.99299610894941637, 0.72465094987411305, 0.41591515983825439, -0.34902, 0.99314869916838333, 0.73234149691004802, 0.42236972610055695, -0.34117600000000003, 0.99331654840924699, 0.7400167849240864, 0.42883955138475621, -0.33333399999999991, 0.99346913862821395, 0.74770733196002137, 0.43529411764705883, -0.32548999999999984, 0.99362172884718092, 0.75539787899595634, 0.44174868390936139, -0.31764800000000015, 0.99377431906614788, 0.76308842603189131, 0.44821850919356071, -0.30980399999999997, 0.99392690928511485, 0.77077897306782639, 0.45467307545586327, -0.30196000000000012, 0.99407949950408181, 0.77846952010376136, 0.46112764171816589, -0.29411799999999999, 0.99423208972304877, 0.78616006713969633, 0.46758220798046846, -0.28627400000000003, 0.99438467994201574, 0.7938506141756313, 0.47405203326466772, -0.27843200000000001, 0.9945372701609827, 0.80154116121156638, 0.48050659952697033, -0.27058800000000005, 0.99468986037994966, 0.80923170824750135, 0.4869611657892729, -0.26274600000000004, 0.99484245059891663, 0.81692225528343632, 0.49343099107347221, -0.25490199999999996, 0.99499504081788359, 0.82461280231937129, 0.49988555733577478, -0.247058, 0.99516289005874725, 0.83228809033340967, 0.50634012359807734, -0.23921599999999998, 0.99531548027771422, 0.83997863736934464, 0.5128099488822766, -0.23137200000000002, 0.99546807049668118, 0.84766918440527961, 0.51926451514457928, -0.2235299999999999, 0.99562066071564814, 0.85535973144121458, 0.52571908140688184, -0.21568600000000004, 0.99577325093461511, 0.86305027847714966, 0.5321736476691844, -0.20784400000000003, 0.99592584115358207, 0.87074082551308463, 0.53864347295338366, -0.19999999999999996, 0.99607843137254903, 0.8784313725490196, 0.54509803921568623, -0.19215599999999999, 0.996231021591516, 0.88319218738078886, 0.55309376668955523, -0.18431399999999998, 0.99638361181048296, 0.88796826123445483, 0.56108949416342413, -0.17647000000000002, 0.99653620202944992, 0.8927290760662242, 0.56908522163729303, -0.168628, 0.99668879224841689, 0.89750514991989017, 0.57708094911116192, -0.16078400000000004, 0.99684138246738385, 0.90226596475165943, 0.58507667658503093, -0.15294200000000002, 0.99699397268635082, 0.9070420386053254, 0.59307240405889983, -0.14509799999999995, 0.99716182192721448, 0.91180285343709466, 0.60108339055466542, -0.13725399999999999, 0.99731441214618144, 0.91656366826886393, 0.60907911802853432, -0.12941199999999986, 0.9974670023651484, 0.92133974212252989, 0.61707484550240332, -0.12156800000000001, 0.99761959258411537, 0.92610055695429927, 0.62507057297627222, -0.1137260000000001, 0.99777218280308233, 0.93087663080796523, 0.63306630045014112, -0.10588199999999992, 0.99792477302204929, 0.9356374456397345, 0.64106202792401012, -0.098040000000000016, 0.99807736324101626, 0.94041351949340046, 0.64905775539787902, -0.090196000000000165, 0.99822995345998322, 0.94517433432516973, 0.65705348287174792, -0.082351999999999981, 0.99838254367895019, 0.949935149156939, 0.66504921034561681, -0.074509999999999965, 0.99853513389791715, 0.95471122301060507, 0.67304493781948582, -0.066666000000000003, 0.99868772411688411, 0.95947203784237434, 0.68104066529335472, -0.058823999999999987, 0.99884031433585108, 0.9642481116960403, 0.68903639276722362, -0.050980000000000025, 0.99899290455481804, 0.96900892652780957, 0.69704737926298921, -0.04313800000000001, 0.9991607537956817, 0.97378500038147553, 0.70504310673685822, -0.035294000000000048, 0.99931334401464866, 0.9785458152132448, 0.71303883421072711, -0.027449999999999974, 0.99946593423361563, 0.98330663004501406, 0.72103456168459601, -0.019607999999999848, 0.99961852445258259, 0.98808270389868014, 0.72903028915846491, -0.011763999999999997, 0.99977111467154955, 0.9928435187304494, 0.73702601663233391, -0.0039219999999999811, 0.99992370489051652, 0.99761959258411537, 0.74502174410620281, 0.0039219999999999811, 0.99807736324101626, 0.99923704890516518, 0.74601358052948807, 0.011764000000000108, 0.99423208972304877, 0.99769588769359885, 0.7400167849240864, 0.01960800000000007, 0.99038681620508129, 0.99615472648203252, 0.73401998931868462, 0.027449999999999974, 0.9865415426871138, 0.99461356527046618, 0.72802319371328295, 0.035293999999999937, 0.98269626916914621, 0.99307240405889985, 0.72202639810788127, 0.043137999999999899, 0.97885099565117872, 0.99154650186923021, 0.7160296025024796, 0.050980000000000025, 0.97500572213321124, 0.99000534065766388, 0.71003280689707793, 0.058823999999999987, 0.97116044861524375, 0.98846417944609755, 0.70403601129167626, 0.066665999999999892, 0.96731517509727627, 0.98692301823453121, 0.69803921568627447, 0.074510000000000076, 0.96346990157930879, 0.98539711604486158, 0.6920424200808728, 0.082351999999999981, 0.9596246280613413, 0.98385595483329513, 0.68604562447547113, 0.090195999999999943, 0.95577935454337382, 0.9823147936217288, 0.68004882887006946, 0.098039999999999905, 0.95194934004730292, 0.98077363241016247, 0.67405203326466778, 0.10588200000000003, 0.94810406652933543, 0.97923247119859613, 0.668055237659266, 0.11372599999999999, 0.94425879301136795, 0.9777065690089265, 0.66205844205386433, 0.1215679999999999, 0.94041351949340046, 0.97616540779736016, 0.65606164644846265, 0.12941200000000008, 0.93656824597543298, 0.97462424658579383, 0.65006485084306098, 0.13725399999999999, 0.93272297245746549, 0.9730830853742275, 0.64405279621576261, 0.14509799999999995, 0.92887769893949801, 0.97154192416266116, 0.63805600061036083, 0.15294199999999991, 0.92503242542153052, 0.97001602197299153, 0.63205920500495916, 0.16078400000000004, 0.92118715190356293, 0.96847486076142519, 0.62606240939955748, 0.168628, 0.91734187838559544, 0.96693369954985886, 0.62006561379415581, 0.1764699999999999, 0.91349660486762796, 0.96539253833829253, 0.61406881818875414, 0.18431400000000009, 0.90965133134966047, 0.96386663614862289, 0.60807202258335236, 0.19215599999999999, 0.90580605783169299, 0.96232547493705656, 0.60207522697795068, 0.19999999999999996, 0.90196078431372551, 0.96078431372549022, 0.59607843137254901, 0.20784399999999992, 0.89288166628519117, 0.9570916304264897, 0.59792477302204927, 0.21568600000000004, 0.88381780727855341, 0.95339894712748918, 0.59977111467154953, 0.22353000000000001, 0.87473868925001907, 0.94970626382848855, 0.60161745632104979, 0.23137199999999991, 0.86565957122148474, 0.94601358052948803, 0.60346379797055005, 0.2392160000000001, 0.85659571221484698, 0.9423361562523842, 0.60531013962005031, 0.247058, 0.84751659418631264, 0.93864347295338368, 0.60715648126955057, 0.25490199999999996, 0.838452735179675, 0.93495078965438316, 0.60900282291905083, 0.26274599999999992, 0.82937361715114066, 0.93125810635538264, 0.61084916456855121, 0.27058800000000005, 0.82029449912260621, 0.92756542305638212, 0.61268024719615477, 0.27843200000000023, 0.81123064011596857, 0.9238727397573816, 0.61452658884565503, 0.28627399999999992, 0.80215152208743423, 0.92018005645838097, 0.61637293049515529, 0.29411800000000032, 0.79307240405889978, 0.91648737315938045, 0.61821927214465555, 0.30196000000000001, 0.78400854505226214, 0.91280994888227662, 0.62006561379415581, 0.30980399999999997, 0.7749294270237278, 0.9091172655832761, 0.62191195544365607, 0.31764799999999993, 0.76586556801709016, 0.90542458228427558, 0.62375829709315633, 0.32549000000000006, 0.75678644998855571, 0.90173189898527506, 0.62560463874265659, 0.33333400000000002, 0.74770733196002137, 0.89803921568627454, 0.62745098039215685, 0.34117599999999992, 0.73864347295338373, 0.89434653238727402, 0.62929732204165711, 0.34902000000000033, 0.72956435492484928, 0.8906538490882735, 0.63114366369115737, 0.35686200000000001, 0.72048523689631494, 0.88696116578927287, 0.63299000534065764, 0.3647060000000002, 0.7114213778896773, 0.88326848249027234, 0.6348363469901579, 0.37254999999999994, 0.70234225986114285, 0.87959105821316852, 0.63668268863965816, 0.38039200000000006, 0.69327840085450521, 0.875898374914168, 0.63852903028915842, 0.38823600000000003, 0.68419928282597087, 0.87220569161516748, 0.64037537193865868, 0.39607799999999993, 0.67512016479743653, 0.86851300831616696, 0.64222171358815905, 0.40392199999999989, 0.66527809567406726, 0.86459143968871599, 0.64321355001144431, 0.41176400000000002, 0.65467307545586328, 0.86044098573281458, 0.64336614023041128, 0.41960799999999998, 0.64405279621576261, 0.85629053177691306, 0.64351873044937824, 0.42745000000000011, 0.63344777599755853, 0.85214007782101164, 0.6436713206683452, 0.43529400000000029, 0.62284275577935455, 0.84798962386511023, 0.64382391088731217, 0.44313800000000003, 0.61222247653925388, 0.84382391088731212, 0.64397650110627913, 0.45098000000000016, 0.60161745632104979, 0.83967345693141071, 0.64414435034714279, 0.4588239999999999, 0.59099717708094912, 0.8355230029755093, 0.64429694056610975, 0.4666659999999998, 0.58039215686274515, 0.83137254901960789, 0.64444953078507672, 0.47450999999999999, 0.56978713664454106, 0.82722209506370636, 0.64460212100404368, 0.48235200000000011, 0.55916685740444039, 0.82307164110780495, 0.64475471122301065, 0.49019600000000008, 0.54856183718623641, 0.81892118715190354, 0.64490730144197761, 0.49804000000000004, 0.53794155794613563, 0.81477073319600213, 0.64505989166094457, 0.50588199999999994, 0.52733653772793165, 0.81060502021820402, 0.64521248187991154, 0.51372599999999968, 0.51673151750972768, 0.80645456626230261, 0.6453650720988785, 0.52156800000000003, 0.5061112382696269, 0.8023041123064012, 0.64551766231784546, 0.52941199999999999, 0.49550621805142292, 0.79815365835049978, 0.64567025253681243, 0.5372539999999999, 0.48488593881132219, 0.79400320439459826, 0.64582284275577939, 0.54509800000000008, 0.47428091859311816, 0.78985275043869685, 0.64597543297474636, 0.55294200000000027, 0.46366063935301749, 0.78570229648279544, 0.64614328221561002, 0.56078399999999995, 0.45305561913481346, 0.78155184252689403, 0.64629587243457698, 0.56862799999999991, 0.44245059891660943, 0.77738612954909592, 0.64644846265354394, 0.57647000000000004, 0.43183031967650876, 0.7732356755931945, 0.64660105287251091, 0.58431399999999978, 0.42122529945830472, 0.76908522163729309, 0.64675364309147787, 0.5921559999999999, 0.410605020218204, 0.76493476768139157, 0.64690623331044483, 0.60000000000000009, 0.40000000000000002, 0.76078431372549016, 0.6470588235294118, 0.60784400000000005, 0.39200427252613107, 0.75185778591592278, 0.65075150682841232, 0.61568599999999996, 0.38400854505226217, 0.7429465171282521, 0.65444419012741284, 0.62352999999999992, 0.37601281757839322, 0.73401998931868462, 0.65813687342641336, 0.63137200000000004, 0.36801709010452432, 0.72510872053101394, 0.66182955672541388, 0.63921600000000001, 0.36002136263065537, 0.71618219272144656, 0.66550698100251771, 0.64705799999999991, 0.35201037613488978, 0.70727092393377589, 0.66919966430151823, 0.65490200000000032, 0.34401464866102083, 0.6983443961242084, 0.67289234760051886, 0.66274600000000006, 0.33601892118715193, 0.68943312733653772, 0.67658503089951938, 0.67058800000000018, 0.32802319371328298, 0.68050659952697035, 0.6802777141985199, 0.67843199999999992, 0.32002746623941403, 0.67159533073929956, 0.68397039749752042, 0.68627400000000005, 0.31203173876554513, 0.66266880292973218, 0.68766308079652094, 0.69411800000000001, 0.30403601129167618, 0.65374227512016481, 0.69135576409552146, 0.70195999999999992, 0.29604028381780728, 0.64483100633249413, 0.69503318837262529, 0.7098040000000001, 0.28804455634393833, 0.63590447852292664, 0.69872587167162581, 0.71764800000000006, 0.28004882887006943, 0.62699320973525596, 0.70241855497062633, 0.72548999999999997, 0.27205310139620048, 0.61806668192568859, 0.70611123826962696, 0.73333399999999993, 0.26405737392233158, 0.6091554131380178, 0.70980392156862748, 0.74117600000000028, 0.25606164644846263, 0.60022888532845042, 0.713496604867628, 0.74902000000000002, 0.24805065995269704, 0.59131761654077974, 0.71718928816662852, 0.75686200000000015, 0.24005493247882811, 0.58239108873121237, 0.72088197146562905, 0.76470600000000011, 0.23205920500495919, 0.57346456092164488, 0.72455939574273287, 0.77255000000000029, 0.22406347753109027, 0.5645532921339742, 0.72825207904173339, 0.78039199999999997, 0.21606775005722134, 0.55562676432440683, 0.73194476234073391, 0.78823600000000016, 0.20807202258335242, 0.54671549553673604, 0.73563744563973454, 0.79607800000000006, 0.20007629510948349, 0.53778896772716867, 0.73933012893873506, 0.80392200000000003, 0.19946593423361564, 0.52895399404898147, 0.73910124361028462, 0.81176399999999993, 0.20622568093385213, 0.52018005645838106, 0.73495078965438321, 0.81960799999999967, 0.21300068665598534, 0.51142137788967723, 0.73080033569848168, 0.82745000000000002, 0.21976043335622186, 0.50264744029907682, 0.72664988174258027, 0.83529399999999998, 0.22653543907835508, 0.4938887617303731, 0.72248416876478216, 0.84313799999999994, 0.2332951857785916, 0.48511482413977264, 0.71833371480888075, 0.85098000000000007, 0.24005493247882811, 0.47635614557106887, 0.71418326085297934, 0.85882400000000025, 0.24682993820096133, 0.46758220798046846, 0.71003280689707793, 0.86666599999999994, 0.25358968490119782, 0.45882352941176469, 0.70588235294117652, 0.8745099999999999, 0.26036469062333106, 0.45006485084306097, 0.70173189898527499, 0.88235200000000003, 0.26712443732356755, 0.4412909132524605, 0.69758144502937358, 0.89019600000000021, 0.2738994430457008, 0.43253223468375679, 0.69343099107347217, 0.89803999999999995, 0.28065918974593729, 0.42375829709315632, 0.68928053711757076, 0.90588200000000008, 0.28743419546807047, 0.41499961852445261, 0.68511482413977265, 0.91372600000000004, 0.29419394216830702, 0.40622568093385214, 0.68096437018387124, 0.92156799999999994, 0.30095368886854351, 0.39746700236514837, 0.67681391622796983, 0.9294119999999999, 0.30772869459067675, 0.38869306477454796, 0.67266346227206841, 0.93725400000000003, 0.31448844129091325, 0.37993438620584419, 0.66851300831616689, 0.94509799999999999, 0.32126344701304649, 0.37116044861524378, 0.66436255436026548, 0.95294199999999996, 0.32802319371328298, 0.36240177004654001, 0.66021210040436407, 0.9607840000000003, 0.33479819943541617, 0.35362783245593959, 0.65606164644846265, 0.96862800000000004, 0.34155794613565271, 0.34486915388723582, 0.65189593347066455, 0.97647000000000017, 0.3483329518577859, 0.33609521629663541, 0.64774547951476313, 0.98431399999999991, 0.35509269855802245, 0.32733653772793164, 0.64359502555886172, 0.99215600000000004, 0.36186770428015563, 0.31856260013733118, 0.6394445716029602, 1.0, 0.36862745098039218, 0.30980392156862746, 0.63529411764705879],
              ColorSpace='RGB',
              ScalarRangeInitialized=1.0)
  return lut


# record the run parameters
print 'config.outputBaseFileName'
print config.outputBaseFileName
print 'config.writeData'
print config.writeData
print 'config.outputWidth'
print config.outputWidth
#
print 'config.inputFileName'
print config.inputFileName
print 'config.arraysToRead'
print config.arraysToRead
print 'config.startTimeStep'
print config.startTimeStep
print 'config.endTimeStep'
print config.endTimeStep
print 'config.subset'
print config.iSubset
print config.jSubset
print config.kSubset
print 'config.readerColorByArray'
print config.readerColorByArray
print 'config.readerColorByArrayComps'
print config.readerColorByArrayComps
print 'config.readerLutMode'
print config.readerLutMode
print 'config.readerLutRange'
print config.readerLutRange
print 'config.readerAlpha'
print config.readerAlpha
#
print 'config.smoothingArraysToFilter'
print config.smoothingArraysToFilter
print 'config.smoothingWidth'
print config.smoothingWidth
print 'config.smoothingColorByArray'
print config.smoothingColorByArray
print 'config.smoothingColorByArrayComps'
print config.smoothingColorByArrayComps
print 'config.smoothingLutMode'
print config.smoothingLutMode
print 'config.smoothingLutRange'
print config.smoothingLutRange
print 'config.smoothingAlpha'
print config.smoothingAlpha
#
print 'config.vorticityArrayToFilter'
print config.vorticityArrayToFilter
print 'config.vorticityArraysToCopy'
print config.vorticityArraysToCopy
print 'config.vorticitySplitComponents'
print config.vorticitySplitComponents
print 'config.vorticityColorByArray'
print config.vorticityColorByArray
print 'config.vorticityColorByArrayComps'
print config.vorticityColorByArrayComps
print 'config.vorticityLutMode'
print config.vorticityLutMode
print 'config.vorticityLutRange'
print config.vorticityLutRange
print 'config.vorticityAlpha'
print config.vorticityAlpha
print 'config.vorticitySplitComponents'
print config.vorticitySplitComponents
print 'config.computeVorticity'
print config.computeVorticity
print 'config.computeHelicity'
print config.computeHelicity
print 'config.computeNHelicity'
print config.computeNHelicity
print 'config.computeDivergence'
print config.computeDivergence
print 'config.computeLambda2'
print config.computeLambda2
print 'config.computeMagnitudes'
print config.computeMagnitudes
print 'config.computeQ'
print config.computeQ
print 'config.computeGradient'
print config.computeGradient
print 'config.computeEigenDiagnostic'
print config.computeEigenDiagnostic
#
print 'config.LICField'
print config.LICField
print 'config.LICSteps'
print config.LICSteps
print 'config.LICStepSize'
print config.LICStepSize
print 'config.LICIntensity'
print config.LICIntensity
print 'config.LICColorByArray'
print config.LICColorByArray
print 'config.LICColorByArrayComps'
print config.LICColorByArrayComps
print 'config.LICLutMode'
print config.LICLutMode
print 'config.LICLutRange'
print config.LICLutRange
print 'config.LICAlpha'
print config.LICAlpha
#
print 'config.camFac'
print config.camFac

# read the dataset
bovr = SQBOVReader(FileName=config.inputFileName)

iExtent = bovr.GetProperty('ISubsetInfo')
jExtent = bovr.GetProperty('JSubsetInfo')
kExtent = bovr.GetProperty('KSubsetInfo')

print 'whole extent'
print iExtent
print jExtent
print kExtent

if (config.iSubset[0] < 0):
  config.iSubset[0] = iExtent[0]
if (config.iSubset[1] < 0):
  config.iSubset[1] = iExtent[1]

if (config.jSubset[0] < 0):
  config.jSubset[0] = jExtent[0]
if (config.jSubset[1] < 0):
  config.jSubset[1] = jExtent[1]

if (config.kSubset[0] < 0):
  config.kSubset[0] = kExtent[0]
if (config.kSubset[1] < 0):
  config.kSubset[1] = kExtent[1]

bovr.ISubset = config.iSubset
bovr.JSubset = config.jSubset
bovr.KSubset = config.kSubset
bovr.Arrays  = config.arraysToRead

rep = Show(bovr)
rep.Representation = 'Outline'

# run the pipeline here to get the bounds
Render()

nSteps = 0
steps = bovr.TimestepValues
try:
  nSteps = len(steps)
except:
  nSteps = 1
  steps = [steps]

print "steps"
print steps
print "nStep"
print nSteps

bounds = bovr.GetDataInformation().GetBounds()
bounds_dx = bounds[1] - bounds[0]
bounds_dy = bounds[3] - bounds[2]
bounds_dz = bounds[5] - bounds[4]
bounds_cx = (bounds[0] + bounds[1])/2.0
bounds_cy = (bounds[2] + bounds[3])/2.0
bounds_cz = (bounds[4] + bounds[5])/2.0

if (bounds_dx == 0):
  # yz
  dimMode = 2
  aspect = bounds_dz/bounds_dy

elif (bounds_dy == 0):
  # xz
  dimMode = 1
  aspect = bounds_dz/bounds_dx

elif (bounds_dz == 0):
  #xy
  dimMode = 0
  aspect = bounds_dy/bounds_dx

else:
  #3d
  dimMode = 3
  aspect = 1.0 # TODO

print 'extent'
print config.iSubset
print config.jSubset
print config.kSubset
print 'bounds'
print bounds
print 'dx'
print (bounds_dx, bounds_dy, bounds_dz)
print 'cx'
print (bounds_cx, bounds_cy, bounds_cz)
print 'dimMode'
print dimMode

lastObj = bovr

# use smoothing
conv = None
if (len(config.smoothingArraysToFilter)):
  ghosts1 = SQImageGhosts()

  rep = Show()
  rep.Representation = 'Outline'

  conv = SQKernelConvolution()
  conv.Width = config.smoothingWidth

  if (config.smoothingArraysToFilter[0]=='all'):
      conv.Arrays = config.arraysToRead
  else:
    conv.Arrays = config.smoothingArraysToFilter

  lastObj = conv
  Hide(bovr)
  Hide(ghosts1)

# compute vorticity
vortex = None
if ((config.vorticityArrayToFilter!='') and
    (config.computeVorticity or config.computeHelicity or
     config.computeNHelicity or config.computeLambda2 or
     config.computeDivergence or config.computeQ or
     config.computeGradient)):

  ghosts2 = SQImageGhosts()

  vortex = SQVortexFilter()
  vortex.Arraytofilter = [config.vorticityArrayToFilter]
  vortex.Splitcomponents = config.vorticitySplitComponents
  vortex.Rotation = config.computeVorticity
  vortex.Normalizedhelicity = config.computeNHelicity
  vortex.Helicity = config.computeHelicity
  vortex.Lambda2 = config.computeLambda2
  vortex.Divergence = config.computeDivergence
  vortex.Resultmagnitude = config.computeMagnitudes
  vortex.Q = config.computeQ
  vortex.Gradient = config.computeGradient
  vortex.Eigenvaluediagnostic = config.computeEigenDiagnostic

  if (len(config.vorticityArraysToCopy)):
    if (config.vorticityArraysToCopy[0]=='all'):
      vortex.Arraystocopy = config.arraysToRead
    else:
      vortex.Arraystocopy = config.vorticityArraysToCopy

  lastObj = vortex

# loop over requested step range
step = 0
if (config.startTimeStep >= 0):
  step = config.startTimeStep
#else:
#  step = nSteps-1

endStep = step
if (config.endTimeStep >= 0):
  endStep = min(config.endTimeStep, nSteps-1)
else:
  endStep = nSteps-1

print 'step'
print step
print 'endStep'
print endStep

if (config.writeData):
  try:
    os.mkdir(config.outputBaseFileName)
  except:
    pass
  print 'writing data to %s'%(config.outputBaseFileName)

while (step <= endStep):

  print '====================================='
  print 'step'
  print step
  print 'time'
  print steps[step]
  print 'wall time'
  print asctime()

  # run the pipeline to get array information
  anim = GetAnimationScene()
  anim.PlayMode = 'Snap To TimeSteps'
  anim.AnimationTime = steps[step]

  view = GetRenderView()
  view.ViewTime = steps[step]
  view.UseOffscreenRenderingForScreenshots = 0

  rep = Show(lastObj)
  rep.Representation = 'Outline'
  Render()

  print 'arrays'
  nArrays = lastObj.PointData.GetNumberOfArrays()
  i = 0
  while (i<nArrays):
    print lastObj.PointData.GetArray(i).Name
    i = i + 1

  # if writing, don't render just write and continue
  if (config.writeData):
    outputPath = '%s/%06d'%(config.outputBaseFileName, step)
    os.mkdir(outputPath)
    outputFileName = '%s/%06d.pvti'%(outputPath, step)
    writer = CreateWriter(outputFileName)
    writer.UpdatePipeline()
    continue

  if (bovr != lastObj):
    Hide(bovr)

  if ((conv is not None) and (conv != lastObj)):
    Hide(conv)

  if ((vortex is not None) and (vortex != lastObj)):
    Hide(vortex)

  rep = Show(lastObj)

  #rv=GetRenderView()
  #rv.LightSwitch=1
  #rv.LightIntensity=1.0

  if (config.writeData):
    print 'write data no render'
    rep.Representation = 'Outline'
  elif (config.LICField!=''):
    print 'rendering as LIC'
    rep.Representation = 'Surface LIC'
    rep.SelectLICVectors = [config.LICField]
    rep.LICIntensity = config.LICIntensity
    rep.LICStepSize = config.LICStepSize
    rep.LICNumberOfSteps = config.LICSteps
    rep.InterpolateScalarsBeforeMapping = 0
    if (config.LICColorByArray!=''):
      rep.ColorArrayName = config.LICColorByArray
      rep.LookupTable = createLUT(config.LICColorByArray,
              config.LICColorByArrayComps,
              config.LICLutRange,
              config.LICLutMode,
              lastObj)
  else:
    print 'rendering as slice'
    rep.Representation = 'Slice'

  # render reader output
  bovrRep=None
  if (config.readerColorByArray!=''):
    print 'rendering reader output'
    bovrRep = Show(bovr)
    if (bovr != lastObj):
      bovrRep.Representation = 'Slice'
    bovrRep.ColorArrayName = config.readerColorByArray
    bovrRep.LookupTable = createLUT(config.readerColorByArray,
            config.readerColorByArrayComps,
            config.readerLutRange,
            config.readerLutMode,
            bovr)
    bovrRep.Opacity = config.readerAlpha
    #Render()

  # render kernel convolution output
  convRep=None
  if (config.smoothingColorByArray!=''):
    print 'rendering convolution filter outout'
    convRep = Show(conv)
    if (conv != lastObj):
      convRep.Representation = 'Slice'
    convRep.ColorArrayName = config.smoothingColorByArray
    convRep.LookupTable = createLUT(config.smoothingColorByArray,
            config.smoothingColorByArrayComps,
            config.smoothingLutRange,
            config.smoothingLutMode,
            conv)
    convRep.Opacity = config.smoothingAlpha
    Render()

  # render vortex filter output
  vortexRep=None
  if (config.vorticityColorByArray!=''):
    print 'rendering vortex filter output'
    vortexRep = Show(vortex)
    if (vortex != lastObj):
      vortexRep.Representation = 'Slice'
    vortexRep.ColorArrayName = config.vorticityColorByArray
    vortexRep.LookupTable = createLUT(config.vorticityColorByArray,
            config.vorticityColorByArrayComps,
            config.vorticityLutRange,
            config.vorticityLutMode,
            vortex)
    vortexRep.Opacity = config.vorticityAlpha
    #Render()

  ren = Render()

  # position the camera
  far  = config.camFac
  near = 0

  if (dimMode == 0):
    # xy
    pos = max(bounds_dx, bounds_dy)
    camUp = [0.0, 1.0, 0.0]
    camPos = [bounds_cx, bounds_cy,  pos*far]
    camFoc = [bounds_cx, bounds_cy, -pos*near]

  elif (dimMode == 1):
    # xz
    pos = max(bounds_dx, bounds_dz)
    camUp = [0.0, 0.0, 1.0]
    camPos = [bounds_cx, -pos*far,  bounds_cz]
    camFoc = [bounds_cx,  pos*near, bounds_cz]

  elif (dimMode == 2):
    # yz
    pos = max(bounds_dy, bounds_dz)
    camUp = [0.0, 0.0, 1.0]
    camPos = [ pos*far, bounds_cy, bounds_cz]
    camFoc = [-pos*near, bounds_cy, bounds_cz]

  else:
    # 3d
    print '3d cam position is yet TODO'

  # user overrides
  if (len(config.camPos)):
    camPos = config.camPos

  if (len(config.camFoc)):
    camFoc = config.camFoc

  if (len(config.camUp)):
    camUp = config.camUp

  view = GetRenderView()
  view.CameraViewUp = camUp
  view.CameraPosition = camPos
  view.CameraFocalPoint = camFoc
  view.UseOffscreenRenderingForScreenshots = 0
  view.CenterAxesVisibility = 0
  view.CameraViewAngle = 60.0
  #view.CameraParallelProjection = 1


  print 'camUp'
  print camUp
  print 'camPos'
  print camPos
  print 'camFoc'
  print camFoc
  print 'camClip'
  print view.CameraClippingRange

  #  write the rendered image
  width = 1024
  if (config.outputWidth>0):
    width = int(config.outputWidth)

  height = int(config.outputHeight)
  if (config.outputHeight<1):
    height = int(width*aspect)

  ren = Render()
  ren.ViewSize = [width, height]

  outputFileName = '%s%06d.png'%(config.outputBaseFileName, step)
  WriteImage(outputFileName)
  print 'output file'
  print outputFileName
  print 'width'
  print width
  print 'height'
  print height

  step = step + 1

print '====================================='
print 'run completed at'
print asctime()

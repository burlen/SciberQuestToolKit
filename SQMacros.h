/*
   ____    _ __           ____               __    ____
  / __/___(_) /  ___ ____/ __ \__ _____ ___ / /_  /  _/__  ____
 _\ \/ __/ / _ \/ -_) __/ /_/ / // / -_|_-</ __/ _/ // _ \/ __/
/___/\__/_/_.__/\__/_/  \___\_\_,_/\__/___/\__/ /___/_//_/\__(_) 

Copyright 2012 SciberQuest Inc.

*/
#ifndef __SQMacros_h
#define __SQMacros_h

#include <iomanip>
using std::setprecision;
using std::setw;
using std::scientific;
#include<iostream>
using std::endl;
using std::cerr;

#define safeio(s) (s?s:"NULL")

#define sqErrorMacro(os,estr)                       \
    os                                              \
      << "Error in:" << endl                        \
      << __FILE__ << ", line " << __LINE__ << endl  \
      << "" estr << endl;

#define SafeDelete(a)\
  if (a)\
    {\
    a->Delete();\
    }

// disbale warning about passing string literals.
#if !defined(__INTEL_COMPILER) && defined(__GNUG__)
#pragma GCC diagnostic ignored "-Wwrite-strings"
#endif

#if defined(WIN32)
// quiet warnings generated by vtk template macro expansion
#pragma warning(disable : 4146)
#pragma warning(disable : 4244)
// quiet warning against posix functions 
#pragma warning(disable : 4996)
// quiet warning for cast int to bool
#pragma warning(disable : 4800)

// help MSVC figure which overload we need, these cases shouldn't
// come up in practice, but they are generated by the vtkTemplateMacro
inline float sqrt(char x){ return sqrt((float)x); }
inline float sqrt(unsigned char x){ return sqrt((float)x); }
inline float sqrt(int x){ return sqrt((float)x); }
inline float sqrt(unsigned int x){ return sqrt((float)x); }
inline double sqrt(long x){ return sqrt((double)x); }
inline double sqrt(unsigned long x){ return sqrt((double)x); }
inline double sqrt(long long x){ return sqrt((double)x); }
inline double sqrt(unsigned long long x){ return sqrt((double)x); }

// imitate posix_memalign on windows.
#include <malloc.h>
static
inline void posix_memalign(void **pData, size_t alignAt, size_t nBytes)
{
  *pData=_aligned_malloc(nBytes,alignAt);
}

#define __restrict__ __restrict

#endif
#endif
/*
   ____    _ __           ____               __    ____
  / __/___(_) /  ___ ____/ __ \__ _____ ___ / /_  /  _/__  ____
 _\ \/ __/ / _ \/ -_) __/ /_/ / // / -_|_-</ __/ _/ // _ \/ __/
/___/\__/_/_.__/\__/_/  \___\_\_,_/\__/___/\__/ /___/_//_/\__(_) 

Copyright 2012 SciberQuest Inc.
*/
#ifndef __pqSQProcessMonitor_h
#define __pqSQProcessMonitor_h

#include "pqNamedObjectPanel.h"

#include <map>
using std::map;
#include <string>
using std::string;
#include  <vector>
using std::vector;

class pqSQProcessMonitorUI;
class pqProxy;
class vtkEventQtSlotConnect;
class QWidget;
class SystemInterface;
class HostData;
class RankData;

class pqSQProcessMonitor : public pqNamedObjectPanel
{
  Q_OBJECT
public:
  pqSQProcessMonitor(pqProxy* proxy, QWidget* p = NULL);
  ~pqSQProcessMonitor();

protected slots:
  // Description:
  // Update the UI with values from the server.
  void PullServerConfig();

  // Description:
  // Update information events are generated by PV in many instances.
  // We need to watch for the ones coresponding to RequestInformation
  // on the server side where the new database view is stored in
  // vtkInformation. This will take that information object
  // and load it in to the QTreeWidget.
  void UpdateInformationEvent();

  // Description:
  // track when server state has last been sync'd
  void IncrementInformationMTime();

  // Description:
  // Pull server load data.
  void UpdateServerLoad();

  // Description:
  // This is where we have to communicate our state to the server.
  void accept();

  // Description:
  // run signal handler editor dialog
  void EditRemoteSignals();

  // Description:
  // run remote command on one of the client or server ranks.
  void EnableRemoteCommands();
  void ExecuteRemoteCommand();

  // Description:
  // Use when an artificial limit on per-process memory
  // consumption is in play, such as on a shared memory system.
  void OverrideCapacity();

  // Description:
  // Context menu
  void ConfigViewContextMenu(const QPoint &pos);
  void ShowOnlyNodes();
  void ShowAllRanks();

private:
  void ClearServerHosts();
  void ClearClientHost();

private:
  pqSQProcessMonitorUI *Ui;

  vtkEventQtSlotConnect *VTKConnect;
  int InformationMTime;

  int ServerType;
  map<string,HostData *> ServerHosts;
  vector<RankData *> ServerRanks;

  int ClientOnly;
  HostData *ClientHost;
  RankData *ClientRank;
  SystemInterface *ClientSystem;

  // signal handlers
  int EnableBacktraceHandler;
  // catch various fpe's
  int TrapFPEDivByZero;
  int TrapFPEInexact;
  int TrapFPEInvalid;
  int TrapFPEOverflow;
  int TrapFPEUnderflow;
};

#endif
